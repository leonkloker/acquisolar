{"ast":null,"code":"var _jsxFileName = \"/Users/zararutherford/Documents/AcquiSolar/AcquiSolar/acquisolar/src/views/main.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [fileName, setFileName] = useState('');\n  const [pdfText, setPdfText] = useState(''); // State to store the extracted text\n\n  const handleFileUpload = async file => {\n    const formData = new FormData();\n    formData.append('pdf', file);\n    try {\n      const response = await fetch('/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      setPdfText(data.text); // Save the extracted text in state\n    } catch (error) {\n      console.error('Error:', error);\n      setPdfText(''); // Reset the text on error\n    }\n  };\n  const handleFileSelect = useCallback(event => {\n    var _event$dataTransfer;\n    event.preventDefault();\n    const file = ((_event$dataTransfer = event.dataTransfer) === null || _event$dataTransfer === void 0 ? void 0 : _event$dataTransfer.files[0]) || event.target.files[0];\n    if (file && file.type === 'application/pdf') {\n      setFileName(file.name);\n      handleFileUpload(file);\n    } else {\n      console.log('Please upload a PDF file.');\n    }\n  }, []);\n  const onDragOver = event => {\n    event.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drop-box\",\n      onDrop: handleFileSelect,\n      onDragOver: onDragOver,\n      style: {\n        width: '800px',\n        height: '500px',\n        borderWidth: '2px',\n        borderColor: '#666',\n        borderStyle: 'dashed',\n        borderRadius: '5px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        fontSize: '16px',\n        color: '#666',\n        marginBottom: '20px',\n        position: 'relative',\n        overflow: 'auto;'\n      },\n      children: [\"Drag and drop a file here or click to select a file\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        style: {\n          position: 'absolute',\n          width: '100%',\n          height: '100%',\n          top: '0',\n          left: '0',\n          opacity: '0',\n          cursor: 'pointer'\n        },\n        onChange: handleFileSelect,\n        onClick: event => event.stopPropagation()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), fileName && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"File name: \", fileName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), pdfText && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pdf-text-container\",\n      style: {\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Extracted Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: pdfText,\n        readOnly: true,\n        style: {\n          width: '100%',\n          // Updated width to 80% of its container\n          height: '300px',\n          margin: '20px 0',\n          padding: '10px',\n          border: '1px solid #ddd',\n          borderRadius: '4px',\n          resize: 'none' // Optional: Prevents resizing the text area\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"Kn5i5XjCZP/2tOFN6VFo+UpISZI=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useCallback","useState","jsxDEV","_jsxDEV","Main","_s","fileName","setFileName","pdfText","setPdfText","handleFileUpload","file","formData","FormData","append","response","fetch","method","body","data","json","text","error","console","handleFileSelect","event","_event$dataTransfer","preventDefault","dataTransfer","files","target","type","name","log","onDragOver","children","className","onDrop","style","width","height","borderWidth","borderColor","borderStyle","borderRadius","display","alignItems","justifyContent","flexDirection","fontSize","color","marginBottom","position","overflow","accept","top","left","opacity","cursor","onChange","onClick","stopPropagation","_jsxFileName","lineNumber","columnNumber","textAlign","value","readOnly","margin","padding","border","resize","_c","$RefreshReg$"],"sources":["/Users/zararutherford/Documents/AcquiSolar/AcquiSolar/acquisolar/src/views/main.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\n\nconst Main = () => {\n  const [fileName, setFileName] = useState('');\n  const [pdfText, setPdfText] = useState('');  // State to store the extracted text\n\n  const handleFileUpload = async (file) => {\n    const formData = new FormData();\n    formData.append('pdf', file);\n\n    try {\n      const response = await fetch('/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json();\n      setPdfText(data.text);  // Save the extracted text in state\n    } catch (error) {\n      console.error('Error:', error);\n      setPdfText('');  // Reset the text on error\n    }\n  };\n\n  const handleFileSelect = useCallback((event) => {\n    event.preventDefault();\n    const file = event.dataTransfer?.files[0] || event.target.files[0];\n    if (file && file.type === 'application/pdf') {\n      setFileName(file.name);\n      handleFileUpload(file);\n    } else {\n      console.log('Please upload a PDF file.');\n    }\n  }, []);\n\n  const onDragOver = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <div>\n      <div \n        className=\"drop-box\"\n        onDrop={handleFileSelect}\n        onDragOver={onDragOver}\n        style={{\n          width: '800px',\n          height: '500px',\n          borderWidth: '2px',\n          borderColor: '#666',\n          borderStyle: 'dashed',\n          borderRadius: '5px',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'column',\n          fontSize: '16px',\n          color: '#666',\n          marginBottom: '20px',\n          position: 'relative',\n          overflow: 'auto;',\n        }}\n      >\n        Drag and drop a file here or click to select a file\n        <input\n          type=\"file\"\n          accept=\"application/pdf\"\n          style={{\n            position: 'absolute',\n            width: '100%',\n            height: '100%',\n            top: '0',\n            left: '0',\n            opacity: '0',\n            cursor: 'pointer'\n          }}\n          onChange={handleFileSelect}\n          onClick={(event) => event.stopPropagation()}\n        />\n        {fileName && <p>File name: {fileName}</p>}\n        </div>\n    {/* Text area container for extracted text */}\n    {pdfText && (\n      <div className=\"pdf-text-container\" style={{ textAlign: 'center' }}>\n        <h2>Extracted Text:</h2>\n        <textarea \n          value={pdfText} \n          readOnly \n          style={{\n            width: '100%', // Updated width to 80% of its container\n            height: '300px',\n            margin: '20px 0',\n            padding: '10px',\n            border: '1px solid #ddd',\n            borderRadius: '4px',\n            resize: 'none', // Optional: Prevents resizing the text area\n          }}\n        />\n      </div>\n    )}\n  </div>\n  );\n};\n\nexport default Main;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAE7C,MAAMS,gBAAgB,GAAG,MAAOC,IAAI,IAAK;IACvC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAEH,IAAI,CAAC;IAE5B,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,EAAE;QACtCC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MACF,MAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCX,UAAU,CAACU,IAAI,CAACE,IAAI,CAAC,CAAC,CAAE;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9Bb,UAAU,CAAC,EAAE,CAAC,CAAC,CAAE;IACnB;EACF,CAAC;EAED,MAAMe,gBAAgB,GAAGxB,WAAW,CAAEyB,KAAK,IAAK;IAAA,IAAAC,mBAAA;IAC9CD,KAAK,CAACE,cAAc,CAAC,CAAC;IACtB,MAAMhB,IAAI,GAAG,EAAAe,mBAAA,GAAAD,KAAK,CAACG,YAAY,cAAAF,mBAAA,uBAAlBA,mBAAA,CAAoBG,KAAK,CAAC,CAAC,CAAC,KAAIJ,KAAK,CAACK,MAAM,CAACD,KAAK,CAAC,CAAC,CAAC;IAClE,IAAIlB,IAAI,IAAIA,IAAI,CAACoB,IAAI,KAAK,iBAAiB,EAAE;MAC3CxB,WAAW,CAACI,IAAI,CAACqB,IAAI,CAAC;MACtBtB,gBAAgB,CAACC,IAAI,CAAC;IACxB,CAAC,MAAM;MACLY,OAAO,CAACU,GAAG,CAAC,2BAA2B,CAAC;IAC1C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAIT,KAAK,IAAK;IAC5BA,KAAK,CAACE,cAAc,CAAC,CAAC;EACxB,CAAC;EAED,oBACExB,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MACEiC,SAAS,EAAC,UAAU;MACpBC,MAAM,EAAEb,gBAAiB;MACzBU,UAAU,EAAEA,UAAW;MACvBI,KAAK,EAAE;QACLC,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE,OAAO;QACfC,WAAW,EAAE,KAAK;QAClBC,WAAW,EAAE,MAAM;QACnBC,WAAW,EAAE,QAAQ;QACrBC,YAAY,EAAE,KAAK;QACnBC,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,aAAa,EAAE,QAAQ;QACvBC,QAAQ,EAAE,MAAM;QAChBC,KAAK,EAAE,MAAM;QACbC,YAAY,EAAE,MAAM;QACpBC,QAAQ,EAAE,UAAU;QACpBC,QAAQ,EAAE;MACZ,CAAE;MAAAlB,QAAA,GACH,qDAEC,eAAAhC,OAAA;QACE4B,IAAI,EAAC,MAAM;QACXuB,MAAM,EAAC,iBAAiB;QACxBhB,KAAK,EAAE;UACLc,QAAQ,EAAE,UAAU;UACpBb,KAAK,EAAE,MAAM;UACbC,MAAM,EAAE,MAAM;UACde,GAAG,EAAE,GAAG;UACRC,IAAI,EAAE,GAAG;UACTC,OAAO,EAAE,GAAG;UACZC,MAAM,EAAE;QACV,CAAE;QACFC,QAAQ,EAAEnC,gBAAiB;QAC3BoC,OAAO,EAAGnC,KAAK,IAAKA,KAAK,CAACoC,eAAe,CAAC;MAAE;QAAAvD,QAAA,EAAAwD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,EACD1D,QAAQ,iBAAIH,OAAA;QAAAgC,QAAA,GAAG,aAAW,EAAC7B,QAAQ;MAAA;QAAAA,QAAA,EAAAwD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAA1D,QAAA,EAAAwD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,EAETxD,OAAO,iBACNL,OAAA;MAAKiC,SAAS,EAAC,oBAAoB;MAACE,KAAK,EAAE;QAAE2B,SAAS,EAAE;MAAS,CAAE;MAAA9B,QAAA,gBACjEhC,OAAA;QAAAgC,QAAA,EAAI;MAAe;QAAA7B,QAAA,EAAAwD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB7D,OAAA;QACE+D,KAAK,EAAE1D,OAAQ;QACf2D,QAAQ;QACR7B,KAAK,EAAE;UACLC,KAAK,EAAE,MAAM;UAAE;UACfC,MAAM,EAAE,OAAO;UACf4B,MAAM,EAAE,QAAQ;UAChBC,OAAO,EAAE,MAAM;UACfC,MAAM,EAAE,gBAAgB;UACxB1B,YAAY,EAAE,KAAK;UACnB2B,MAAM,EAAE,MAAM,CAAE;QAClB;MAAE;QAAAjE,QAAA,EAAAwD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAA1D,QAAA,EAAAwD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAA1D,QAAA,EAAAwD,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAER,CAAC;AAAC3D,EAAA,CAnGID,IAAI;AAAAoE,EAAA,GAAJpE,IAAI;AAqGV,eAAeA,IAAI;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}