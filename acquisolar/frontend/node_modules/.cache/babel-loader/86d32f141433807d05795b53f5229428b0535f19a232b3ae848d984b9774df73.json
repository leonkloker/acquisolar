{"ast":null,"code":"var _jsxFileName = \"/Users/zararutherford/Documents/AcquiSolar/AcquiSolar/acquisolar/frontend/src/views/main.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [fileName, setFileName] = useState('');\n  const [pdfText, setPdfText] = useState('');\n  const handleFileUpload = async file => {\n    const formData = new FormData();\n    formData.append('pdf', file);\n    try {\n      const response = await fetch('/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      setPdfText(data.text);\n    } catch (error) {\n      console.error('Error:', error);\n      setPdfText('');\n    }\n  };\n  const handleFileSelect = useCallback(event => {\n    var _event$dataTransfer;\n    event.preventDefault(); // Prevents browser from opening file\n    const file = ((_event$dataTransfer = event.dataTransfer) === null || _event$dataTransfer === void 0 ? void 0 : _event$dataTransfer.files[0]) || event.target.files[0];\n    if (file && file.type === 'application/pdf') {\n      setFileName(file.name);\n      handleFileUpload(file);\n    } else {\n      console.log('Please upload a PDF file.');\n    }\n  }, []);\n  const onDragOver = event => {\n    event.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drop-box\",\n      onDrop: handleFileSelect,\n      onDragOver: onDragOver,\n      children: [\"Drag and drop a file here or click to select a file\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: handleFileSelect,\n        onClick: event => event.stopPropagation()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this), fileName && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"File name: \", fileName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }, this), pdfText && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pdf-text-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Extracted Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: pdfText,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 1\n  }, this);\n};\n_s(Main, \"Kn5i5XjCZP/2tOFN6VFo+UpISZI=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useCallback","useState","jsxDEV","_jsxDEV","Main","_s","fileName","setFileName","pdfText","setPdfText","handleFileUpload","file","formData","FormData","append","response","fetch","method","body","data","json","text","error","console","handleFileSelect","event","_event$dataTransfer","preventDefault","dataTransfer","files","target","type","name","log","onDragOver","className","children","onDrop","accept","onChange","onClick","stopPropagation","_jsxFileName","lineNumber","columnNumber","value","readOnly","_c","$RefreshReg$"],"sources":["/Users/zararutherford/Documents/AcquiSolar/AcquiSolar/acquisolar/frontend/src/views/main.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport \"../App.css\";\n\nconst Main = () => {\n  const [fileName, setFileName] = useState('');\n  const [pdfText, setPdfText] = useState(''); \n\n  const handleFileUpload = async (file) => {\n    const formData = new FormData();\n    formData.append('pdf', file);\n\n    try {\n      const response = await fetch('/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json();\n      setPdfText(data.text); \n    } catch (error) {\n      console.error('Error:', error);\n      setPdfText('');\n    }\n  };\n\n  const handleFileSelect = useCallback((event) => {\n    event.preventDefault(); // Prevents browser from opening file\n    const file = event.dataTransfer?.files[0] || event.target.files[0];\n    if (file && file.type === 'application/pdf') {\n      setFileName(file.name);\n      handleFileUpload(file);\n    } else {\n      console.log('Please upload a PDF file.');\n    }\n  }, []);\n\n  const onDragOver = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n<div className=\"container\">\n  <div className=\"drop-box\" onDrop={handleFileSelect} onDragOver={onDragOver}>\n    Drag and drop a file here or click to select a file\n    <input\n      type=\"file\"\n      accept=\"application/pdf\"\n      onChange={handleFileSelect}\n      onClick={(event) => event.stopPropagation()}\n    />\n    {fileName && <p>File name: {fileName}</p>}\n  </div>\n  {/* Text area container for extracted text */}\n  {pdfText && (\n    <div className=\"pdf-text-container\">\n      <h2>Extracted Text:</h2>\n      <textarea value={pdfText} readOnly />\n    </div>\n  )}\n</div>\n  );\n};\n\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}